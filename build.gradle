buildscript {
	ext {
		cleanArchitectureVersion = '3.23.1'
		springBootVersion = '3.5.0'
		sonarVersion = '6.2.0.5505'
		jacocoVersion = '0.8.13'
		pitestVersion = '1.15.0'
        lombokVersion = '1.18.38'
	}
}

plugins {
	id 'co.com.bancolombia.cleanArchitecture' version "${cleanArchitectureVersion}"
	id 'org.springframework.boot' version "${springBootVersion}" apply false
	id 'info.solidsoft.pitest' version "${pitestVersion}" apply false
	id 'org.sonarqube' version '4.4.1.3373'
	id 'jacoco'
}

sonar {
    def modules = subprojects.projectDir.collect { "${it.toString().replace(project.projectDir.toString() + "/", "")}" }
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.modules", "${modules.join(',')}"
        property "sonar.sources", "src,deployment,settings.gradle,main.gradle,build.gradle,${modules.collect { "${it}/build.gradle" }.join(',')}"
        property "sonar.exclusions","**/MainApplication.java"
        property "sonar.test", "src/test"
        property "sonar.java.binaries", ""
        property "sonar.junit.reportsPath", ""
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.scanner.force-deprecated-ce-task", "true"
        property "sonar.qualitygate.wait", "true"

        // Configuración para SonarQube local (se puede sobreescribir desde línea de comandos)
        property "sonar.host.url", System.getProperty("sonar.host.url", "http://localhost:9000")

        // Si estamos en entorno de CI (GitHub Actions)
        if (System.getenv("CI") == "true") {
            property "sonar.projectKey", System.getProperty("sonar.projectKey")
            property "sonar.organization", System.getProperty("sonar.organization")
            property "sonar.host.url", "https://sonarcloud.io"
        }
    }
}

apply from: './main.gradle'
